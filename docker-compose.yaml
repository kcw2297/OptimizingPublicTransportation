version: "3.7"

services:
  zookeeper: # open the zookeeper on port 2181.
    image: confluentinc/cp-zookeeper:5.2.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181" # set the zookeeper port on the env variable.
  kafka0: # open the broker on port 9092. kafka client can connect to that port.
    image: confluentinc/cp-kafka:5.2.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0 # set the unique id to the broker
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181" # address and port to the zookeeper.
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka0:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092" # the address and port that the broker will advertise to producers and consumers to connect to.
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL" # 브로커 간의 소통을 위해, INTENAL listener를 사용합니다.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT" # 보안 프로토콜을 정의합니다.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1" # 메세지의 개수를 의미합니다. 1은 replica를 생성하지 않습니다.
      KAFKA_CONNECTIONS_MAX_IDLE_MS: 7200000
    depends_on:
      - "zookeeper"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.2
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka0:19092" # 카프카 주소와 포트를 설정해, 연결합니다.
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" # 스키마 등록소가 listen할 주소와 포트입니다.
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry" # 스키마 등록소 호스트 네임입니다.
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: "1" # 스키마 등록소는 카프카 토픽에 스키마를 저장합니다. value 1은 하나의 브로커 안의 토픽에 저장합니다.
      KAFKASTORE_TIMEOUT_MS: 7200000
    depends_on:
      - "kafka0"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.2
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka0:19092" # proxy가 연결할 브로커 주소와 포트입니다.
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082/" # proxy가 listen할 주소와 포트입니다.
      KAFKA_REST_HOST_NAME: "rest-proxy" # proxy의 호스트 네임입니다.
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/" # 스키마 저장소의 주소에서 스키마를 fetch합니다.
    depends_on:
      - "kafka0"
      - "schema-registry"

  connect:
    image: confluentinc/cp-kafka-connect:5.2.2
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka0:19092" # 연결할 브로커 주소입니다.
      CONNECT_GROUP_ID: "connect" # connector group id를 설정해, connector instance를 worker별로 처리합니다.
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect" # 호스트 이름입니다.
      CONNECT_PLUGIN_PATH: "/usr/share/java" # connector instance를 생성하기 위해 참조할 파일 경로입니다.
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" # 바이트 데이터 흐름을 json으로 변환합니다.
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" # 바이트 데이터 흐름을 json으로 변환합니다.
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter" # 데이터 produce/consume시 데이터 변환기입니다.
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter" # 데이터 produce/consume시 데이터 변환기입니다.
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config" # 카프카 topic으로 connector 설정을 저장합니다.
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offset"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
    depends_on:
      - "kafka0"
      - "schema-registry"

  ksql:
    image: confluentinc/cp-ksql-server:5.2.2
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka0:19092" # 카프카 브로커 주소입니다.
      KSQL_LISTENERS: "http://0.0.0.0:8088" # listen할 주소와 포트입니다.
      KSQL_KSQL_SERVICE_ID: "ksql_service_docker" # KSQL 서버의 고유 번호입니다.
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/" # 스키마 등록소 주소를 설정해 스키마를 fetch합니다.
    depends_on:
      - "kafka0"
      - "schema-registry"

  connect-ui: # 카프카 Connect 상태 및 설정을 웹 페이지에서 관리가능케합니다.
    image: landoop/kafka-connect-ui:0.9.7
    ports:
      - "8084:8084"
    environment:
      PORT: "8084"
      PROXY: "true" # Connect 서비스의 요청을 proxy합니다.
      CONNECT_URL: "http://connect:8083"
    depends_on:
      - "connect"

  topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    ports:
      - "8085:8085"
    environment:
      PORT: "8085"
      PROXY: "true"
      KAFKA_REST_PROXY_URL: "http://rest-proxy:8082"
    depends_on:
      - "rest-proxy"

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    ports:
      - "8086:8086"
    environment:
      PORT: "8086"
      PROXY: "true"
      SCHEMAREGISTRY_URL: "http://schema-registry:8081/"
    depends_on:
      - "schema-registry"

  postgres:
    image: postgres:11
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "cta_admin"
      POSTGRES_PASSWORD: "chicago"
      POSTGRES_DB: "cta"
    volumes:
      - ./producers/data/cta_stations.csv:/tmp/cta_stations.csv # local host의 csv파일을 도커 컨테이너에 반영합니다.
      - ./load_stations.sql:/docker-entrypoint-initdb.d/load_stations.sql # local host의 load_stations.sql script을 도커가 실행과 함께 작동합니다.
